#Lines, which start with a "#" will be ignored. 

#This is an example configuration file for the wikipedia-map project. At the moment,
#only the plotting process can be influenced by this file.

#Before you start you need a DOT file with the whole graph in it. The graph MUST be a
#real tree graph, otherwise the program will crash! Please check for loops in your
# DOT file.
#After the process is finished, a TEX file is exported to the specified location

#These configuration variables are split into three categories:
#	GRAPH		fileimport/export
#	DRAW		visualisation of the plotting process
#	PLOTTER		plotting algorithm itself

#In the following, every categorie and every variable will be explained.


#######################################################################################################################

#GRAPH: import/export

#path to your dot file. You can set a relative path here, e.g. "../data/wiki_sorted.dot"
#This file has the graph (and maybe more) in it, which will be plotted
GRAPHinputDOTfile = data/wiki_sorted_20k.dot

#This is the root node in your graph. It may happen, that you only want to plot a 
#subgraph of the graph, wich is defined in your DOT file. In this case, simply 
#change this value.
GRAPHrootCaption = Philosophie

#path to your output TEX file. After the process, you'll find a TeX document in this
#file, only containing a TikZ picture. Compile this TeX file and have a nice PDF of your
#plotted graph!
#ATTENTION! This file should already exist, before you start!
GRAPHoutputTEXfile = output.tex


#######################################################################################################################

#DRAW: sometimes, you want your plotting process visualised in order to get faster feedback for future optimisation.

#The size of the root node on the sreen, in pixels
DRAWrootSize = 50.0

#check this, if you want to draw the edges of the graph
DRAWlines = true

#How often to update the Plotter, before the picture is redrawn.
DRAWeveryNumberOfUpdates = 100

#display size of the window. If $height is 0 or not defined, the display will be a square.
DRAWdisplayWidth = 1024
#DRAWdisplayHeight = 0

#######################################################################################################################

#PLOTTER: This is the heart of the application at the moment. You might understand the parameters better,
#if you get an little insight in how the plotting algorithm works:
#First of all, all nodes are plotted in groups. The group which is plotted at the moment is called the movingNodes.
# After a group has been placed, there is no chance of changing its positions again. Also, nodes are plotted 
#hierarchical, so every node being placed, already got it's parent node placed.
#The root node always gets the position (0,0).
#When a group is placed, it starts on an outer cirlce (called the movingNodeCircle). The exact position on these 
#circle is determined by the already placed parent nodes of the group.
#From now on, every movingNode checks against every other nearby node (already placed _and_ moving) if there is
#a collision.
#IF collision:
#	Go $stepsize units away from the intersecting node
#	Go $stepsize units away from the center (0,0)
#ELSE
#	Go $stepsize units in the direction of your parent
#	Go $stepsize units in the direction of the center at (0,0)
#This is repeated $maxIterations times. If a node isn't moving more than $minStepSizeBeforeAbort during a time of
#$persistenceBeforeAbort steps, the plotter thinks that the node already "found" it's place and must not be moved 
#further.

#every redrawInterval*iterations, the picture will be redrawn. This is kind of redundant with 
#DRAWeveryNumberOfUpdates, might be removed in future versions.
PLOTTERredrawInterval = 0

#Maximum of steps, a single node will travel. After that, it stops where it is.
PLOTTERmaxIteration = 2000

#Maximum of steps, a single node will travel. After that, it stops where it is.
PLOTTERstepSize = 0.005

#This is the distance to (0,0), from which every Node starts its journey. This value should be big enough to not 
#intersect with any already plotted Nodes! The bigger it is, the more iterations you will need.
PLOTTERmovingCircleRadius = 1.0

#This value determines, how the amount of children and subchildren of a node is translated into it's size. The bigger
#it is, the bigger are nodes drawn which has'nt got any children. If it is 0.0, every node with no children will have
#the size 1/n, if n is the amount of all nodes.
PLOTTERsizeOffSet = 0.0

#Sometimes you don't want to plot all the nodes. With this option, every node which have less than $minNodeLeafs 
#children will be ignored.
PLOTTERminNodeLeafs = 1

#This is a feature for better performance. If a node is'nt moving more than $minStepSizeBeforAbort over 
#$persistenceBeforeAbort steps, it is seen as placed and will not move further.
PLOTTERminStepSizeBeforeAbort = 0.005
PLOTTERpersistenceBeforeAbort = 200

#You can mix between two different methods of nodeSize evaluation. Slide this value between 0.0 and 1.0.
#1.0 means, the nodeSize is determined by the size of the subTree
#0.0 means, the nodeSize is determined by the amount of children
PLOTTERsizeMethodMix = 1.0

#This also belongs to PLOTTER. There is some optimisation happening with the collision detection. The smaller this 
#value is, the faster might the plotting happen. Be carefule, because this will rapidly increase your memory usage!
NODESETMANAGERgridSize = 0.01
